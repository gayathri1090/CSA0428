#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 10

// Function to sort processes based on burst time
void sortProcessesByBurstTime(int process[], int burstTime[], int n) {
    int temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (burstTime[i] > burstTime[j]) {
                // Swap burst time
                temp = burstTime[i];
                burstTime[i] = burstTime[j];
                burstTime[j] = temp;

                // Swap process ID
                temp = process[i];
                process[i] = process[j];
                process[j] = temp;
            }
        }
    }
}

// Function to calculate waiting time and turnaround time
void calculateTimes(int process[], int burstTime[], int n, int waitingTime[], int turnaroundTime[]) {
    int completionTime[MAX_PROCESSES];
    completionTime[0] = burstTime[0];
    waitingTime[0] = 0;
    turnaroundTime[0] = burstTime[0];

    // Calculate waiting time and turnaround time
    for (int i = 1; i < n; i++) {
        completionTime[i] = completionTime[i - 1] + burstTime[i];
        turnaroundTime[i] = completionTime[i];
        waitingTime[i] = turnaroundTime[i] - burstTime[i];
    }
}

// Function to print process details
void printProcessDetails(int process[], int burstTime[], int waitingTime[], int turnaroundTime[], int n) {
    float totalWaitingTime = 0, totalTurnaroundTime = 0;
    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        totalWaitingTime += waitingTime[i];
        totalTurnaroundTime += turnaroundTime[i];
        printf("%d\t%d\t\t%d\t\t%d\n", process[i], burstTime[i], waitingTime[i], turnaroundTime[i]);
    }

    printf("\nAverage Waiting Time: %.2f\n", totalWaitingTime / n);
    printf("Average Turnaround Time: %.2f\n", totalTurnaroundTime / n);
}

int main() {
    int process[MAX_PROCESSES], burstTime[MAX_PROCESSES];
    int waitingTime[MAX_PROCESSES], turnaroundTime[MAX_PROCESSES];
    int n;

    printf("Enter the number of processes (max %d): ", MAX_PROCESSES);
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        process[i] = i + 1;
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &burstTime[i]);
    }

    // Sort processes based on burst time
    sortProcessesByBurstTime(process, burstTime, n);

    // Calculate waiting time and turnaround time
    calculateTimes(process, burstTime, n, waitingTime, turnaroundTime);

    // Print process details
    printProcessDetails(process, burstTime, waitingTime, turnaroundTime, n);

    return 0;
}
