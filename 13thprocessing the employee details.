#include <stdio.h>

// Structure to represent an employee
typedef struct {
    int emp_id;
    char name[20];
    int age;
    float salary;
} Employee;

// Function to add an employee to the file
void add_employee(FILE *fp) {
    Employee emp;
    printf("Enter employee ID: ");
    scanf("%d", &emp.emp_id);
    printf("Enter employee name: ");
    scanf("%s", emp.name);
    printf("Enter employee age: ");
    scanf("%d", &emp.age);
    printf("Enter employee salary: ");
    scanf("%f", &emp.salary);

    fseek(fp, 0, SEEK_END); // Move to the end of the file
    fwrite(&emp, sizeof(Employee), 1, fp);
}

// Function to display all employees
void display_employees(FILE *fp) {
    Employee emp;
    fseek(fp, 0, SEEK_SET); // Move to the beginning of the file
    while (fread(&emp, sizeof(Employee), 1, fp) == 1) {
        printf("Employee ID: %d\n", emp.emp_id);
        printf("Employee Name: %s\n", emp.name);
        printf("Employee Age: %d\n", emp.age);
        printf("Employee Salary: %.2f\n\n", emp.salary);
    }
}

// Function to search for an employee by ID
void search_employee(FILE *fp) {
    int emp_id;
    Employee emp;
    printf("Enter employee ID to search: ");
    scanf("%d", &emp_id);

    fseek(fp, 0, SEEK_SET); // Move to the beginning of the file
    while (fread(&emp, sizeof(Employee), 1, fp) == 1) {
        if (emp.emp_id == emp_id) {
            printf("Employee found!\n");
            printf("Employee ID: %d\n", emp.emp_id);
            printf("Employee Name: %s\n", emp.name);
            printf("Employee Age: %d\n", emp.age);
            printf("Employee Salary: %.2f\n\n", emp.salary);
            return;
        }
    }
    printf("Employee not found!\n");
}

// Function to update an employee's details
void update_employee(FILE *fp) {
    int emp_id;
    Employee emp;
    printf("Enter employee ID to update: ");
    scanf("%d", &emp_id);

    fseek(fp, 0, SEEK_SET); // Move to the beginning of the file
    while (fread(&emp, sizeof(Employee), 1, fp) == 1) {
        if (emp.emp_id == emp_id) {
            printf("Enter new employee name: ");
            scanf("%s", emp.name);
            printf("Enter new employee age: ");
            scanf("%d", &emp.age);
            printf("Enter new employee salary: ");
            scanf("%f", &emp.salary);

            fseek(fp, -sizeof(Employee), SEEK_CUR); // Move to the current position - sizeof(Employee)
            fwrite(&emp, sizeof(Employee), 1, fp);
            printf("Employee updated successfully!\n");
            return;
        }
    }
    printf("Employee not found!\n");
}

int main() {
    FILE *fp;
    int choice;

    fp = fopen("employees.dat", "rb+"); // Open the file in binary read-write mode
    if (fp == NULL) {
        fp = fopen("employees.dat", "wb+"); // Create the file if it doesn't exist
        if (fp == NULL) {
            printf("Error opening file!\n");
            return 1;
        }
    }

    while (1) {
        printf("1. Add employee\n");
        printf("2. Display all employees\n");
        printf("3. Search for an employee\n");
        printf("4. Update an employee's details\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                add_employee(fp);
                break;
            case 2:
                display_employees(fp);
                break;
            case 3:
                search_employee(fp);
                break;
            case 4:
                update_employee(fp);
                break;
            case 5:
                fclose(fp);
                return 0;
            default:
                printf("Invalid choice!\n");
        }
    }

    return 0;
}
