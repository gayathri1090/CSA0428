#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>

#define FILENAME "example.txt"
#define BUFFER_SIZE 1024

int main() {
    int fd;
    ssize_t bytesRead, bytesWritten;
    char writeBuffer[] = "Hello, this is a sample text written to the file.\n";
    char readBuffer[BUFFER_SIZE];

    // Creating and opening a file
    fd = open(FILENAME, O_CREAT | O_WRONLY | O_TRUNC, 0644);
    if (fd == -1) {
        perror("Error creating/opening the file");
        exit(EXIT_FAILURE);
    }

    // Writing to the file
    bytesWritten = write(fd, writeBuffer, strlen(writeBuffer));
    if (bytesWritten == -1) {
        perror("Error writing to the file");
        close(fd);
        exit(EXIT_FAILURE);
    }
    printf("Written %ld bytes to the file.\n", bytesWritten);

    // Closing the file
    if (close(fd) == -1) {
        perror("Error closing the file");
        exit(EXIT_FAILURE);
    }

    // Opening the file for reading
    fd = open(FILENAME, O_RDONLY);
    if (fd == -1) {
        perror("Error opening the file for reading");
        exit(EXIT_FAILURE);
    }

    // Reading from the file
    bytesRead = read(fd, readBuffer, BUFFER_SIZE - 1);
    if (bytesRead == -1) {
        perror("Error reading from the file");
        close(fd);
        exit(EXIT_FAILURE);
    }

    // Null-terminate the buffer to print it as a string
    readBuffer[bytesRead] = '\0';
    printf("Read %ld bytes from the file:\n%s", bytesRead, readBuffer);

    // Closing the file
    if (close(fd) == -1) {
        perror("Error closing the file");
        exit(EXIT_FAILURE);
    }

    return 0;
}
