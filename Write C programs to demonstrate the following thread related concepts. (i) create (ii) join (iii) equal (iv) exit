#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

void* threadFunction(void* arg) {
    printf("Thread %d is running\n", *(int*)arg);
    pthread_exit(NULL);
}

int main() {
    pthread_t thread;
    int threadArg = 1;

    // Create a new thread
    if (pthread_create(&thread, NULL, threadFunction, &threadArg) != 0) {
        perror("Failed to create thread");
        exit(EXIT_FAILURE);
    }

    // Wait for the thread to finish
    pthread_join(thread, NULL);

    printf("Main thread finished\n");
    return 0;
}
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

void* threadFunction(void* arg) {
    printf("Thread %d is running\n", *(int*)arg);
    pthread_exit(NULL);
}

int main() {
    pthread_t thread;
    int threadArg = 1;

    // Create a new thread
    if (pthread_create(&thread, NULL, threadFunction, &threadArg) != 0) {
        perror("Failed to create thread");
        exit(EXIT_FAILURE);
    }

    // Wait for the thread to finish
    if (pthread_join(thread, NULL) != 0) {
        perror("Failed to join thread");
        exit(EXIT_FAILURE);
    }

    printf("Main thread finished\n");
    return 0;
}
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

void* threadFunction(void* arg) {
    pthread_t self = pthread_self();
    printf("Thread %d is running with ID %lu\n", *(int*)arg, self);
    pthread_exit(NULL);
}

int main() {
    pthread_t thread1, thread2;
    int threadArg1 = 1, threadArg2 = 2;

    // Create two new threads
    if (pthread_create(&thread1, NULL, threadFunction, &threadArg1) != 0) {
        perror("Failed to create thread1");
        exit(EXIT_FAILURE);
    }

    if (pthread_create(&thread2, NULL, threadFunction, &threadArg2) != 0) {
        perror("Failed to create thread2");
        exit(EXIT_FAILURE);
    }

    // Compare the two thread IDs
    if (pthread_equal(thread1, thread2)) {
        printf("Thread1 and Thread2 are equal\n");
    } else {
        printf("Thread1 and Thread2 are not equal\n");
    }

    // Wait for both threads to finish
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    printf("Main thread finished\n");
    return 0;
}
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

void* threadFunction(void* arg) {
    printf("Thread %d is running\n", *(int*)arg);
    pthread_exit(NULL);
}

int main() {
    pthread_t thread;
    int threadArg = 1;

    // Create a new thread
    if (pthread_create(&thread, NULL, threadFunction, &threadArg) != 0) {
        perror("Failed to create thread");
        exit(EXIT_FAILURE);
    }

    // Main thread exits, but other threads continue to run
    printf("Main thread is exiting\n");
    pthread_exit(NULL);

    // This line will not be executed
    return 0;
}
